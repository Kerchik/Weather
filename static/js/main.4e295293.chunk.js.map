{"version":3,"sources":["components/Info.jsx","components/Form.jsx","components/Weather.jsx","api/requests.js","App.jsx","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","_ref","city","weatherMethod","setCityCallback","onSubmit","type","name","placeholder","value","onChange","e","target","className","Weather","country","temp","pressure","sunset","error","requests","getWeather","_getWeather","Object","asyncToGenerator","regenerator_default","mark","_callee","request","wrap","_context","prev","next","fetch","concat","sent","abrupt","json","stop","_x","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","state","setState","_useState3","_useState4","setCity","data","sunsetInSec","date","minutes","sunset_date","preventDefault","cod","sys","Date","getMinutes","getHours","main","message","components_Info","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e295293.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div>\r\n            <h2>Weather app</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = ({city, weatherMethod, setCityCallback}) => {\r\n    const setCityHandler = (e) => {\r\n        setCityCallback(e.target.value)\r\n    }\r\n    return (\r\n        <form onSubmit={weatherMethod}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"city\"\r\n                placeholder=\"City name\"\r\n                value={city}\r\n                onChange={setCityHandler}\r\n            />\r\n            <button className=\"btn btn-warning\">Check weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = ({city, country, temp, pressure, sunset, error}) => {\r\n    return (\r\n        <div className=\"margin-below-xl\">\r\n            {city &&\r\n                <div>\r\n                    <p>Location: {city},{country}</p>\r\n                    <p>Temperature: {temp}</p> \r\n                    <p>Pressure: {pressure}</p>\r\n                    <p>Sunset: {sunset}</p> \r\n                </div>\r\n            }\r\n            <p className=\"text-warning\">{error}</p>   \r\n        </div>\r\n    )\r\n}\r\n    \r\nexport default Weather;","const API_KEY = \"0ee6bd66c4f2ef133f03d43e9c14f56e\"\r\n\r\nexport default {\r\n    async getWeather(city) {\r\n        const request = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\r\n        return request.json()\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport Info from \"./components/Info.jsx\";\r\nimport Form from \"./components/Form.jsx\";\r\nimport Weather from \"./components/Weather.jsx\";\r\nimport requests from \"./api/requests.js\";\r\n\r\nconst App = () => {\r\n    const [state, setState] = useState({\r\n        temp: null,\r\n        city: null,\r\n        country: null,\r\n        pressure: null,\r\n        sunset: null,\r\n        error: null\r\n    })\r\n    const [city, setCity] = useState('')\r\n\r\n    const setCityHandler = (value) => {\r\n        setCity(value)\r\n    }\r\n    \r\n    const getWeather = async (e) => {\r\n        e.preventDefault();\r\n        if (city) {\r\n            const data = await requests.getWeather(city)\r\n            if (data.cod === 200) {\r\n                const sunsetInSec = data.sys.sunset;\r\n                const date = new Date(sunsetInSec * 1000);\r\n                let minutes; \r\n                if (date.getMinutes() < 10) {\r\n                    minutes = \"0\" + date.getMinutes();\r\n                } else {\r\n                    minutes = date.getMinutes();\r\n                }\r\n                const sunset_date = date.getHours() + \":\" + minutes;\r\n            \r\n                setState({\r\n                    temp: data.main.temp,\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    pressure: data.main.pressure,\r\n                    sunset: sunset_date,\r\n                    error: null\r\n                });\r\n            } else {\r\n                setState({\r\n                    temp: null,\r\n                    city: null,\r\n                    country: null,\r\n                    pressure: null,\r\n                    sunset: null,\r\n                    error: data.message\r\n                }); \r\n            }\r\n        } else {\r\n            setState({\r\n                temp: null,\r\n                city: null,\r\n                country: null,\r\n                pressure: null,\r\n                sunset: null,\r\n                error: \"Enter the name of the city\"\r\n            }); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className =\"wrapper\">\r\n            <div className=\"main\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-5 info\">\r\n                            <Info />\r\n                        </div>\r\n                        <div className=\"col-lg-7 form\">\r\n                            <Form weatherMethod={getWeather} city={city} setCityCallback={setCityHandler}/>\r\n                            <Weather \r\n                                temp={state.temp}\r\n                                city={state.city}\r\n                                country={state.country}\r\n                                pressure={state.pressure}\r\n                                sunset={state.sunset}\r\n                                error={state.error}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}